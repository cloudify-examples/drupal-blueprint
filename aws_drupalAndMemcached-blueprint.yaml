tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.3/plugin.yaml
  - http://www.getcloudify.org/spec/aws-plugin/1.4.1/plugin.yaml
  - scale.yaml


inputs:
  docRoot:
    type: string
    default: ''
  dbPort:
    type: string
    default: ''
  dbBindAddress: 
    type: string
    default: ''
  memcachePort:
    type: string
    default: ''
  agent_user:
    type: string
    default: ''
  agent_private_key_path: 
    type: string
    default: ''
# Ubuntu 14.04
  image_id:
    type: string
    default: ''
# RAM: 4096 MB, Hard Disk 80 GB, 2 vCPUs
  instance_type:
    type: string
    default: ''
  ec2_region_name:
    type: string
    default: ''
  aws_access_key_id:
    type: string
    default: ''
  aws_secret_access_key: 
    type: string
    default: ''
  drupal_security_group_name:
    type: string
    default: ''
  schemaurl:
    type: string
    default: ''
  drupalImageURL:
    type:
    default: ''

node_types:

  ###########################################################
  # We define a type that inherits openstack's default
  # server, and adds monitoring capabillities on top of it.
  ###########################################################

  host:
    derived_from: cloudify.aws.nodes.Instance
    properties:
      cloudify_agent:
        default: 
          user: { get_input: agent_user } 
          key:  { get_input: agent_private_key_path }
      image_id: 
        default: { get_input: image_id }
      instance_type: 
        default: { get_input: instance_type }        
    interfaces:
      utils.ops:
        restart_vm_op: utils-scripts/restart_vm.sh
      ###########################################################
      # We are infact telling cloudify to install a diamond
      # monitoring agent on the server.
      #
      # (see https://github.com/BrightcoveOS/Diamond)
      ###########################################################
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                default:
                  interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
      ###########################################################
      # Adding some collectors. These collectors are necessary
      # for the Cloudify UI to display the deafult metrics.
      ###########################################################
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}

  mysql_dbms:
    derived_from: cloudify.nodes.DBMS
    properties:
      port:
        description: MySQL port
        type: integer
      sectionNames:
        description: A command separated list of my.cnf section names
        type: string
      variableNames:
        description: A command separated list of my.cnf variable names
        type: string
      newValues:
        description: A command separated list of my.cnf values for the above variable names
        type: string

  mysql_schema:
    derived_from: cloudify.nodes.ApplicationModule
    properties:
      port:
        description: MySQL port
        type: integer
      schemaurl:
        description: schema zip url
        type: string
      query:
        description: Test Query
        type: string

  memcached_db_server:
    derived_from: cloudify.nodes.DBMS
    properties:
      port:
        description: Memcached port
        type: integer

  memcached_application:
    derived_from: cloudify.nodes.ApplicationModule
    properties:
      port:
        description: Memcached port
        type: integer
      requiredmemory:
        description: Required memory size in MB
        type: integer

  apache_server:
    derived_from: cloudify.nodes.WebServer
    properties:
      base_port:
        description: Web application port
        type: integer
      needPhp:
        description: Does this application require php
        type: string
      needMemcache:
        description: Does this application require memcache
        type: string
      dbType:
        description: Database type that this application requires
        type: string
      num_instances:
        description: Number of instances
        type: integer
      drupalVersion:
        description: Drupal version
        type: string
      newPort:
        description: Apache port
        type: integer
      docRoot:
        description: docRoot of the Apache
        type: string

  drupal_application:
    derived_from: cloudify.nodes.ApplicationModule
    properties:
      drupalImageURL:
        description: Drupal image zip URL
        type: string
      app_name:
        description: Application name
        type: string
      dbName:
        description: Database name
        type: string
      dbUserName:
        description: DB user name
        type: string
      dbUserPassword:
        description: DB user password
        type: string
      docRoot:
        description: docRoot of the Drupal
        type: string



relationships:
  drupal_server_connected_to_mysql_database:
    derived_from: cloudify.relationships.connected_to

  drupal_app_connected_to_mysql_drupal_schema:
    derived_from: cloudify.relationships.connected_to
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        postconfigure: drupal-scripts/configure-mysql-drupal.sh
    target_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        postconfigure: mysql-scripts/configure-mysql-schema.sh
  drupal_app_connected_to_memcached_app:
    derived_from: cloudify.relationships.connected_to
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        establish: drupal-scripts/configure-memcached-drupal.sh


node_templates:

  drupal_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: &aws_configuration
        aws_access_key_id: { get_input: aws_access_key_id }
        aws_secret_access_key: { get_input: aws_secret_access_key }
        ec2_region_name: { get_input: ec2_region_name }
      resource_id: { get_input: drupal_security_group_name }
      description: Security group for Cloudify Manager VM
      rules:
        - ip_protocol: tcp 
          cidr_ip: 0.0.0.0/0
          from_port: 8080
          to_port: 8080
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 8000
          to_port: 8000
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 8081
          to_port: 8081
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 22
          to_port: 22
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 80
          to_port: 80
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 3306
          to_port: 3306
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 55672
          to_port: 55672
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 5672
          to_port: 5672
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 53229
          to_port: 53229
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 8101
          to_port: 8101
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 8100
          to_port: 8100

  apache_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties: 
      aws_config: *aws_configuration
    capabilities:
      scalable:
        properties:
          default_instances: 1

  mysql_vm:
    type: host
    properties:
      image_id: { get_input: image_id }
      instance_type: { get_input: instance_type }
      aws_config: *aws_configuration 
    instances:
      deploy: 1
    relationships:
      - target: drupal_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group

  memcached_vm:
    type: host
    properties:
      image_id: { get_input: image_id }
      instance_type: { get_input: instance_type }
      aws_config: *aws_configuration  
    instances:
      deploy: 1
    relationships:
      - target: drupal_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group

  apache_vm:
    type: host
    properties:
      image_id: { get_input: image_id }
      instance_type: { get_input: instance_type }
      aws_config: *aws_configuration  
    capabilities:
      scalable:
        properties:
          default_instances: 1
    relationships:
      - target: drupal_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: apache_ip
        type: cloudify.aws.relationships.instance_connected_to_elastic_ip

  mysql_database:
    type: mysql_dbms
    properties:
      port: { get_input: dbPort }
      sectionNames: mysqld
      variableNames: bind-address
      newValues: 0.0.0.0
    interfaces:
      cloudify.interfaces.lifecycle:
        create: mysql-scripts/install-mysql-aws.sh
        start: mysql-scripts/start-mysql.sh
        stop: mysql-scripts/stop-mysql.sh
    relationships:
      - target: mysql_vm
        type: cloudify.relationships.contained_in

  mysql_drupal_schema:
    type: mysql_schema
    properties:
      port: { get_input: dbPort }
      query: select name,mail from users
      schemaurl: { get_input: schemaurl }
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: mysql-scripts/configure-mysql-schema.sh
      cloudify.interfaces.monitoring:
         start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
               collectors_config:
                  MySQLCollector:
                     config:
                        enabled: True
                        hosts: "admin:123@localhost:3306/mydrupaldb"
    relationships:
      - target: mysql_database
        type: cloudify.relationships.contained_in

  memcached_server:
    type: memcached_db_server
    properties:
      port: { get_input: memcachePort }
    interfaces:
      cloudify.interfaces.lifecycle:
        create: memcached-scripts/install-memcached.sh
        configure: memcached-scripts/configure-memcached.sh
    relationships:
      - target: memcached_vm
        type: cloudify.relationships.contained_in

  memcached_app:
    type: memcached_application
    properties:
      port: { get_input: memcachePort }
      requiredmemory: 1000
    interfaces:
      cloudify.interfaces.lifecycle:
        start: memcached-scripts/start-memcached.sh
        stop: memcached-scripts/stop-memcached.sh  
    relationships:
      - target: memcached_server
        type: cloudify.relationships.contained_in

  drupal_server:
    type: apache_server
    properties:
      base_port: 8080
      num_instances: 1
      needPhp: yesplease
      needMemcache: yesplease
      dbType: mysql
      drupalVersion: 7
      newPort: 80
      docRoot: { get_input: docRoot }
    interfaces:
      cloudify.interfaces.lifecycle:
        create: apache-scripts/install-apache.sh
    relationships:
      - type: cloudify.relationships.contained_in
        target: apache_vm
      - type: drupal_server_connected_to_mysql_database
        target: mysql_database

  drupal_app:
    type: drupal_application
    properties:
      docRoot: { get_input: docRoot }
      drupalImageURL: { get_input: drupalImageURL }
      app_name: My drupal web server
      dbName: mydrupaldb
      dbUserName: admin
      dbUserPassword: 123  
    interfaces:
      cloudify.interfaces.lifecycle:        
        start: apache-scripts/start-apache.sh
        stop: apache-scripts/stop-apache.sh
      drupal.interfaces.action:
        install_project: drupal-scripts/drush-install.sh
        set_variable: drupal-scripts/drush-setvar.sh

    relationships:
      - type: cloudify.relationships.contained_in
        target: drupal_server
      - type: drupal_app_connected_to_memcached_app
        target: memcached_app
      - type: drupal_app_connected_to_mysql_drupal_schema
        target: mysql_drupal_schema


plugins:
   drush-plugin:
      executor: central_deployment_agent
      source: drush-plugin

   utils-plugin:
      executor: central_deployment_agent
      source: utils-plugin


workflows:
   restart_vms:
      mapping: utils-plugin.vms.tasks.restart_vms
      parameters:
        node_id:
          description: The node id whose instance will be restarted
        node_instance_id:
          description: The node instance id which will be restarted - default(null) = All instances...
          default: null
        my_input:
          description: Additional input
          default: null

   drush_install:
      mapping: drush-plugin.drush.tasks.install_project
      parameters:
         project_name: {}
   
   # See Built-in Workflows in http://getcloudify.org/guide/3.3.1/guide-workflows.html#built-in-workflows
#   drushinstall:
#      mapping: default_workflows.cloudify.plugins.workflows.execute_operation
#      parameters:
#         operation: drupal.interfaces.action.install_project
#         node_ids:
#           - drupal_app

   drush_setvar:
      mapping: drush-plugin.drush.tasks.set_variable
      parameters:
         variable_name:
           default: theme_default
         variable_value: {}

# Syntax without parameters
# drush_dl: drush-plugin.drush.tasks.drush_download_module
# drush_en: drush-plugin.drush.tasks.drush_enable_module
  
outputs:
  endpoint:
    description: My application endpoint
    value:
      drupal_url: { concat: ['http://', { get_attribute: [apache_vm, public_ip_address] },':', { get_property: [drupal_server, newPort] }] }


groups:

  scale_up_group:
    members: [apache_vm]
    policies:
      auto_scale_up:
        type: scale_policy_type
        properties:
          default_instances: 1
          # If there is more than one member and policy_operates_on_group is set to true,
          # then the threshold is checked against the SUM of all the relevant metrics from all the memebers.
          # E.g.:
          #  policy_operates_on_group is set to true and the members are aaa,bbb and ccc
          #  threshold is 10
          # aaa has 3, bbb has 4 and ccc is 5, then together they are more than 10 , hence the threshold will be breached.
          # if policy_operates_on_group is set to false, then if and only if at least one of them (aaa,bbb or ccc) is greater than 10, the threshold will be breached.
          policy_operates_on_group: true
          scale_limit: 5
          scale_direction: '<'
          scale_threshold: 40
          service_selector: .*apache_vm.*.cpu.total.user
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: 1
                node_id: apache
                # scale_compute: true

  scale_down_group:
    members: [apache_vm]
    policies:
      auto_scale_down:
        type: scale_policy_type
        properties:
          default_instances: 1
          scale_limit: 2
          scale_direction: '>'
          scale_threshold: 20
          service_selector: .*apache_vm.*.cpu.total.user
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: -1
                node_id: apache
                # scale_compute: true

  heal_group:
    members: [memcached_vm]
    policies:
      simple_autoheal_policy:
        type: cloudify.policies.types.host_failure
        properties:
          service: ['cpu.total.user']
            #- .*memcached-vm.*.cpu.total.user
          interval_between_workflows: 60
        triggers:
          auto_heal_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: heal
              workflow_parameters:
                node_instance_id: { 'get_property': [ SELF, node_id ] }
                diagnose_value: { 'get_property': [ SELF, diagnose ] }

  apache:
    members: [apache_vm, apache_ip]


policies:
  scale_policy1:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
    targets: [apache]
