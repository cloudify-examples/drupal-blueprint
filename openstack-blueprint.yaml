tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.4/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.5.2/plugin.yaml
  - scale.yaml

inputs:

  environment_blueprint_filename:
    default: openstack-blueprint.yaml

  keystone_username:
    default: { get_secret: keystone_username }

  keystone_password:
    default: { get_secret: keystone_password }

  keystone_tenant_name:
    default: { get_secret: keystone_tenant_name }

  keystone_url:
    default: { get_secret: keystone_url }

  region:
    default: { get_secret: region }

  external_network_name:
    default: { get_secret: external_network_name }

  router_name:
    default: { get_secret: router_name }

  public_network_name:
    default: { get_secret: public_network_name }

  private_network_name:
    default: { get_secret: public_network_name }

  public_subnet_name:
    default: { get_secret: public_subnet_name }

  private_subnet_name:
    default: { get_secret: public_subnet_name }

  agent_key_private:
    description: >
      The content of the agent's private key.
    default: { get_secret: agent_key_private }

  agent_key_public:
    description: >
      The content of the agent's public key.
    default: { get_secret: agent_key_public }

  image:
    description: >
      An Openstack Image ID. Tested with a Ubuntu 14.04 image.
    default: { get_secret: ubuntu_trusty_image }

  flavor:
    description: >
      An Openstack Flavor ID.
    default: { get_secret: small_image_flavor }

  agent_user:
    description: The user name of the agent on the instance created from the image.
    default: ubuntu

  docRoot:
    default: /var/www/html

  db_name:
    default: mydrupaldb

  db_user_name:
    # Dont change for now.
    default: demo

  db_user_password:
    # Dont change for now.
    default: X0kdmdwethrngosdf88

  db_port:
    default: 3306

  memcachePort:
    default: 11211

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }

node_types:

  host:
    derived_from: cloudify.openstack.nodes.Server
    properties:
      agent_config:
        default:
          user: { get_input: agent_user }
          install_method: remote
          port: 22
          key: { get_input: agent_key_private }
      server:
        default:
          key_name: ''
          image: { get_input: image }
          flavor: { get_input: flavor }
      management_network_name:
        default: { get_property: [ public_network, resource_id ] }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstack.nova_plugin.server.create
          inputs:
            args:
              default:
                image: { get_input: image }
                flavor: { get_input: flavor }
                userdata: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
      utils.ops:
        restart_vm_op: utils-scripts/restart_vm.sh
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                default:
                  interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}

  memcached_db_server:
    derived_from: cloudify.nodes.DBMS
    properties:
      port:
        description: Memcached port
        type: integer

  memcached_application:
    derived_from: cloudify.nodes.ApplicationModule
    properties:
      port:
        description: Memcached port
        type: integer
      requiredmemory:
        description: Required memory size in MB
        type: integer

  apache_server:
    derived_from: cloudify.nodes.WebServer
    properties:
      base_port:
        description: Web application port
        type: integer
      needPhp:
        description: Does this application require php
        type: string
      needMemcache:
        description: Does this application require memcache
        type: string
      dbType:
        description: Database type that this application requires
        type: string
      num_instances:
        description: Number of instances
        type: integer
      drupalVersion:
        description: Drupal version
        type: string
      newPort:
        description: Apache port
        type: integer
      docRoot:
        description: docRoot of the Apache
        type: string

  drupal_application:
    derived_from: cloudify.nodes.ApplicationModule
    properties:
      drupalImageURL:
        description: Drupal image zip URL
        type: string
      app_name:
        description: Application name
        type: string
      dbName:
        description: Database name
        type: string
      dbUserName:
        description: DB user name
        type: string
      dbUserPassword:
        description: DB user password
        type: string
      docRoot:
        description: docRoot of the Drupal
        type: string
      dbPort:
        description: DB port number
        type: string
      dbHost:
        description: DB host
        type: string

relationships:

  drupal_server_connected_to_mysql_database:
    derived_from: cloudify.relationships.connected_to

  drupal_app_connected_to_mysql_db:
    derived_from: cloudify.relationships.depends_on
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        establish: drupal-scripts/configure-mysql-drupal.sh

  drupal_app_connected_to_memcached_app:
    derived_from: cloudify.relationships.connected_to
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        establish: drupal-scripts/configure-memcached-drupal.sh

node_templates:

  drupal_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 8080
        - remote_ip_prefix: 0.0.0.0/0
          port: 8000
        - remote_ip_prefix: 0.0.0.0/0
          port: 8081
        - remote_ip_prefix: 0.0.0.0/0
          port: 22
        - remote_ip_prefix: 0.0.0.0/0
          port: 80
        - remote_ip_prefix: 0.0.0.0/0
          port: 3306
        - remote_ip_prefix: 0.0.0.0/0
          port: 55672
        - remote_ip_prefix: 0.0.0.0/0
          port: 5672
        - remote_ip_prefix: 0.0.0.0/0
          port: 53229
        - remote_ip_prefix: 0.0.0.0/0
          port: 8101
        - remote_ip_prefix: 0.0.0.0/0
          port: 8100

  apache_ip:
    type: cloudify.openstack.nodes.FloatingIP
    capabilities:
      scalable:
        properties:
          default_instances: 1
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network

  memcached_vm:
    type: host
    instances:
      deploy: 1
    properties:
      openstack_config: *openstack_config
      management_network_name: { get_property: [ private_network, resource_id ] }
    relationships:
      - target: memcached_vm_port
        type: cloudify.openstack.server_connected_to_port

  apache_vm:
    type: host
    capabilities:
      scalable:
        properties:
          default_instances: 1
    properties:
      openstack_config: *openstack_config
    relationships:
      - target: apache_vm_port
        type: cloudify.openstack.server_connected_to_port

  mysql_vm_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_network
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: drupal_security_group

  memcached_vm_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_network
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: drupal_security_group

  apache_vm_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: drupal_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: apache_ip

  memcached_server:
    type: memcached_db_server
    properties:
      port: { get_input: memcachePort }
    interfaces:
      cloudify.interfaces.lifecycle:
        create: memcached-scripts/install-memcached.sh
        configure: memcached-scripts/configure-memcached.sh
    relationships:
      - target: memcached_vm
        type: cloudify.relationships.contained_in

  memcached_app:
    type: memcached_application
    properties:
      port: { get_input: memcachePort }
      requiredmemory: 1000
    interfaces:
      cloudify.interfaces.lifecycle:
        start: memcached-scripts/start-memcached.sh
        stop: memcached-scripts/stop-memcached.sh
    relationships:
      - target: memcached_server
        type: cloudify.relationships.contained_in

  drupal_server:
    type: apache_server
    properties:
      base_port: 8080
      num_instances: 1
      needPhp: yesplease
      needMemcache: yesplease
      dbType: mysql
      drupalVersion: 7
      newPort: 80
      docRoot: { get_input: docRoot }
    interfaces:
      cloudify.interfaces.lifecycle:
        create: apache-scripts/install-apache.sh
    relationships:
      - type: cloudify.relationships.contained_in
        target: apache_vm

  drupal_app:
    type: drupal_application
    properties:
      docRoot: { get_input: docRoot }
      drupalImageURL: http://repository.cloudifysource.org/org/cloudifysource/examples/drupal/babies_image_d7_v2.zip
      app_name: My drupal web server
      dbName: { get_input: db_name }
      dbUserName: { get_input: db_user_name }
      dbUserPassword: { get_input: db_user_password }
      dbPort: { get_input: db_port }
      dbHost: { get_attribute: [ mysql_db, deployment, outputs, ip ] }  
    interfaces:
      cloudify.interfaces.lifecycle:
        start: apache-scripts/start-apache.sh
        stop: apache-scripts/stop-apache.sh
      drupal.interfaces.action:
        install_project: drupal-scripts/drush-install.sh
        set_variable: drupal-scripts/drush-setvar.sh
    relationships:
      - type: cloudify.relationships.contained_in
        target: drupal_server
      - type: drupal_app_connected_to_memcached_app
        target: memcached_app
      - type: drupal_app_connected_to_mysql_db
        target: mysql_db
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            establish:
              implementation: drupal-scripts/configure-mysql-drupal.sh
              inputs:
                dbHost: { get_property: [ SOURCE, dbHost ] }

  # lb:
  mysql_db:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: lb
          blueprint_archive: https://github.com/cloudify-examples/haproxy-blueprint/archive/612c98216f9bb057320698c496e0c8c975a26df5.zip
          main_file_name: { get_input: environment_blueprint_filename }
        deployment:
          id: lb
          inputs:
            application_ip: ''
          outputs:
            ip: ip
    relationships:
      - type: cloudify.relationships.depends_on
        target: db
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: cfy_util.cloudify_deployment_proxy.tasks.create_deployment
          inputs:
            resource_config:
              blueprint: { get_property: [ SELF, resource_config, blueprint ] }
              deployment:
                id: { get_property: [ SELF, resource_config, deployment, id ] }
                inputs:
                  application_ip: { get_attribute: [ db, deployment, outputs, ips, 0 ] }
                outputs:
                  # ip: { get_property: [ SELF, resource_config, deployment, outputs, ip ] }
                  ip: { get_property: [ SELF, resource_config, deployment, outputs, ip ] }
    # Un-comment out the interfaces section below if you are using mysql db deployment.
        stop: {}
        delete: {}

  db:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: db
          blueprint_archive: https://github.com/cloudify-examples/mariadb-blueprint/archive/master.zip
          main_file_name: { get_input: environment_blueprint_filename }
        deployment:
          id: db
          inputs:
            new_password: { get_input: db_user_password }
          outputs:
            cluster_addresses: ips
    # Un-comment out the interfaces section below if you are using mysql db deployment.
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}
        delete: {}

  # mysql_db:
  #   type: cloudify.nodes.DeploymentProxy
  #   properties:
  #     resource_config:
  #       blueprint:
  #         id: db
  #         blueprint_archive: https://github.com/cloudify-examples/mariadb-blueprint/archive/master.zip
  #         main_file_name: { get_input: environment_blueprint_filename }
  #       deployment:
  #         id: db
  #         inputs:
  #           db_name: { get_input: db_name }
  #           db_user_name: { get_input: db_user_name }
  #           db_user_password: { get_input: db_user_password }
  #           db_port: { get_input: db_port }
  #         outputs:
  #           mysql_ip: ip
  #   # Un-comment out the interfaces section below if you are using mysql db deployment.
  #   interfaces:
  #     cloudify.interfaces.lifecycle:
  #       stop: {}
  #       delete: {}

  private_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: private_subnet_name }
    relationships:
      - target: private_network
        type: cloudify.relationships.contained_in

  private_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: private_network_name }

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_name }
    relationships:
      - target: public_network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_network_name }

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: router_name }
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: external_network_name }
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        manage_etc_hosts: True
        users:
          - name: { get_input: agent_user }
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            ssh-authorized-keys:
              - { get_input: agent_key_public }

# plugins:
#   drush-plugin:
#     executor: central_deployment_agent
#     source: drush-plugin

#   utils-plugin:
#     executor: central_deployment_agent
#     source: utils-plugin

# workflows:
#   restart_vms:
#     mapping: utils-plugin.vms.tasks.restart_vms
#     parameters:
#       node_id:
#         description: The node id whose instance will be restarted
#       node_instance_id:
#         description: The node instance id which will be restarted - default(null) = All instances...
#         default: null
#       my_input:
#         description: Additional input
#         default: null

#   drush_install:
#     mapping: drush-plugin.drush.tasks.install_project
#     parameters:
#       project_name: {}

#   drush_setvar:
#     mapping: drush-plugin.drush.tasks.set_variable
#     parameters:
#       variable_name:
#         default: theme_default
#       variable_value: {}

outputs:

  endpoint:
    description: My application endpoint
    value:
      drupal_url: { concat: ['http://', { get_attribute: [apache_ip, floating_ip_address] },':', { get_property: [drupal_server, newPort] }] }

  mysql_ip:
    description: My Database application endpoint
    value:
      mysql_ip: { get_attribute: [ mysql_db, deployment, outputs, ip ] }

groups:

  scale_up_group:
    members: [apache_vm]
    policies:
      auto_scale_up:
        type: scale_policy_type
        properties:
          default_instances: 1
          # If there is more than one member and policy_operates_on_group is set to true,
          # then the threshold is checked against the SUM of all the relevant metrics from all the memebers.
          # E.g.:
          #  policy_operates_on_group is set to true and the members are aaa,bbb and ccc
          #  threshold is 10
          # aaa has 3, bbb has 4 and ccc is 5, then together they are more than 10 , hence the threshold will be breached.
          # if policy_operates_on_group is set to false, then if and only if at least one of them (aaa,bbb or ccc) is greater than 10, the threshold will be breached.
          policy_operates_on_group: true
          scale_limit: 5
          scale_direction: '<'
          scale_threshold: 40
          service_selector: .*apache_vm.*.cpu.total.user
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: 1
                node_id: apache
                # scale_compute: true

  scale_down_group:
    members: [apache_vm]
    policies:
      auto_scale_down:
        type: scale_policy_type
        properties:
          default_instances: 1
          scale_limit: 2
          scale_direction: '>'
          scale_threshold: 20
          service_selector: .*apache_vm.*.cpu.total.user
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: -1
                node_id: apache
                # scale_compute: true

  heal_group:
    members: [memcached_vm]
    policies:
      simple_autoheal_policy:
        type: cloudify.policies.types.host_failure
        properties:
          service: ['cpu.total.user']
            #- .*memcached-vm.*.cpu.total.user
          interval_between_workflows: 60
        triggers:
          auto_heal_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: heal
              workflow_parameters:
                node_instance_id: { 'get_property': [ SELF, node_id ] }
                diagnose_value: { 'get_property': [ SELF, diagnose ] }

  apache:
    members: [apache_vm, apache_vm_port]
